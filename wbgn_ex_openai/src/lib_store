mod api;

use api::get_response;
use gloo::events::EventListener;
use wasm_bindgen::prelude::*;
use wasm_bindgen_futures::spawn_local;
use web_sys::Document;
use web_sys::Element;
use web_sys::HtmlInputElement;

#[wasm_bindgen(start)]
fn run() -> Result<(), JsValue> {
    let window = web_sys::window().expect("no global `window` exists");
    let document = window.document().expect("should have a document on window");
    let body = document.body().expect("document should have a body");

    // Manufacture the element we're gonna append
    let search_div = create_div(&document, "search", "ReportStyles-secondDiv col-md-12");

    let input_box = create_input_box(&document);

    search_div.append_child(&input_box)?;

    let submit_box = create_submit_box(&document);

    let temp_div = create_div(
        &document,
        "tempDetail",
        "ReportStyles-mainContainer col-md-12 maincontainer",
    );

    // let first_div = document.create_element("div")?;
    let completion = document.create_element("p")?;

    temp_div.append_child(&completion)?;

    search_div.append_child(&submit_box)?;
    body.append_child(&search_div)?;
    body.append_child(&temp_div)?;

    let on_click = EventListener::new(&submit_box, "click", move |_event| {
        let input_value = document
            .get_element_by_id("name")
            .unwrap()
            .dyn_into::<HtmlInputElement>()
            .unwrap()
            .value();

        let input_value: &'static _ = Box::leak(Box::new(input_value));

        println!("Unsure whether will get: {:?}", input_value);

        let response = get_response(input_value.to_owned(), 300);

        let completer = completion.clone();

        spawn_local(async move {
            let parsed = response.await.unwrap();
            let ai_out = &parsed.choices[0].message.content;
            completer.set_inner_html(ai_out);
        });
    });

    on_click.forget();
    Ok(())
}

fn create_div(document: &Document, id: &str, class: &str) -> Element {
    let div = document.create_element("div").unwrap();
    div.set_id(id);
    div.set_class_name(class);
    div
}

fn create_submit_box(document: &Document) -> Element {
    let submit_box: Element = document.create_element("input").unwrap();
    submit_box
        .set_attribute("type", "button")
        .expect("failed to set attr type to button");
    submit_box
        .set_attribute("value", "Ask a query")
        .expect("failed to set attr value to Search");
    submit_box
        .set_attribute("name", "Query")
        .expect("failed to set attr name to submit");
    submit_box.set_id("submit");
    submit_box.set_class_name(" ReportStyles-bootstrapButton btn btn-info");
    submit_box
}

fn create_input_box(document: &Document) -> Element {
    let input_box = document.create_element("input").unwrap();
    input_box
        .set_attribute("name", "name")
        .expect("failed to set attr name to name");
    input_box.set_attribute("value", "Where is God?").expect(
        "
    failed to set attr value to where is god",
    );
    input_box
        .set_attribute("type", "text")
        .expect("failed to set attr type to text");
    input_box
        .set_attribute("placeholder", "Ask your query here")
        .expect("Failed to set attr placeholder to Type your query");
    input_box.set_id("name");
    input_box.set_class_name("ReportStyles-search");
    input_box
}
